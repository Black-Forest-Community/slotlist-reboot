# Generated by Django 5.2.7 on 2025-10-17 22:46

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('tag', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('website', models.URLField(blank=True, max_length=500, null=True)),
                ('logo_url', models.URLField(blank=True, db_column='logoUrl', max_length=500, null=True)),
                ('game_servers', models.JSONField(db_column='gameServers', default=list)),
                ('voice_comms', models.JSONField(db_column='voiceComms', default=list)),
                ('repositories', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
            ],
            options={
                'verbose_name_plural': 'communities',
                'db_table': 'communities',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('short_description', models.TextField(db_column='shortDescription')),
                ('detailed_description', models.TextField(db_column='detailedDescription')),
                ('collapsed_description', models.TextField(blank=True, db_column='collapsedDescription', null=True)),
                ('briefing_time', models.DateTimeField(db_column='briefingTime')),
                ('slotting_time', models.DateTimeField(db_column='slottingTime')),
                ('start_time', models.DateTimeField(db_column='startTime')),
                ('end_time', models.DateTimeField(db_column='endTime')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('community', 'Community'), ('private', 'Private'), ('hidden', 'Hidden')], default='hidden', max_length=50)),
                ('tech_support', models.TextField(blank=True, db_column='techSupport', null=True)),
                ('rules', models.TextField(blank=True, null=True)),
                ('details_map', models.CharField(blank=True, db_column='detailsMap', max_length=255, null=True)),
                ('details_game_mode', models.CharField(blank=True, db_column='detailsGameMode', max_length=255, null=True)),
                ('required_dlcs', models.JSONField(db_column='requiredDLCs', default=list)),
                ('banner_image_url', models.URLField(blank=True, db_column='bannerImageUrl', max_length=500, null=True)),
                ('game_server', models.JSONField(blank=True, db_column='gameServer', null=True)),
                ('voice_comms', models.JSONField(blank=True, db_column='voiceComms', null=True)),
                ('repositories', models.JSONField(default=list)),
                ('mission_token', models.UUIDField(blank=True, db_column='missionToken', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('community', models.ForeignKey(blank=True, db_column='communityUid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='missions', to='api.community')),
            ],
            options={
                'db_table': 'missions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MissionSlotGroup',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('order_number', models.IntegerField(db_column='orderNumber', default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('mission', models.ForeignKey(db_column='missionUid', on_delete=django.db.models.deletion.CASCADE, related_name='slot_groups', to='api.mission')),
            ],
            options={
                'db_table': 'missionSlotGroups',
                'ordering': ['order_number', 'title'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nickname', models.CharField(max_length=255)),
                ('steam_id', models.CharField(db_column='steamId', max_length=255, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('community', models.ForeignKey(blank=True, db_column='communityUid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='api.community')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(db_column='notificationType', max_length=255)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField()),
                ('additional_data', models.JSONField(blank=True, db_column='additionalData', null=True)),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('user', models.ForeignKey(db_column='userUid', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='api.user')),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MissionSlotTemplate',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('slot_groups', models.JSONField(db_column='slotGroups', default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('community', models.ForeignKey(blank=True, db_column='communityUid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='slot_templates', to='api.community')),
                ('creator', models.ForeignKey(db_column='creatorUid', on_delete=django.db.models.deletion.CASCADE, related_name='slot_templates', to='api.user')),
            ],
            options={
                'db_table': 'missionSlotTemplates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MissionSlot',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('detailed_description', models.TextField(blank=True, db_column='detailedDescription', null=True)),
                ('order_number', models.IntegerField(db_column='orderNumber', default=0)),
                ('required_dlcs', models.JSONField(db_column='requiredDLCs', default=list)),
                ('external_assignee', models.CharField(blank=True, db_column='externalAssignee', max_length=255, null=True)),
                ('blocked', models.BooleanField(default=False)),
                ('reserve', models.BooleanField(default=False)),
                ('auto_assignable', models.BooleanField(db_column='autoAssignable', default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('restricted_community', models.ForeignKey(blank=True, db_column='restrictedCommunityUid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restricted_slots', to='api.community')),
                ('slot_group', models.ForeignKey(db_column='slotGroupUid', on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='api.missionslotgroup')),
                ('assignee', models.ForeignKey(blank=True, db_column='assigneeUid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_slots', to='api.user')),
            ],
            options={
                'db_table': 'missionSlots',
                'ordering': ['order_number', 'title'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MissionAccess',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('community', models.ForeignKey(blank=True, db_column='communityUid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mission_accesses', to='api.community')),
                ('mission', models.ForeignKey(db_column='missionUid', on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='api.mission')),
                ('user', models.ForeignKey(blank=True, db_column='userUid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mission_accesses', to='api.user')),
            ],
            options={
                'db_table': 'missionAccesses',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='mission',
            name='creator',
            field=models.ForeignKey(db_column='creatorUid', on_delete=django.db.models.deletion.CASCADE, related_name='missions', to='api.user'),
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permission', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('user', models.ForeignKey(db_column='userUid', on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='api.user')),
            ],
            options={
                'db_table': 'permissions',
                'managed': True,
                'unique_together': {('user', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='MissionSlotRegistration',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('slot', models.ForeignKey(db_column='slotUid', on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='api.missionslot')),
                ('user', models.ForeignKey(db_column='userUid', on_delete=django.db.models.deletion.CASCADE, related_name='slot_registrations', to='api.user')),
            ],
            options={
                'db_table': 'missionSlotRegistrations',
                'managed': True,
                'unique_together': {('user', 'slot')},
            },
        ),
        migrations.CreateModel(
            name='CommunityApplication',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('approved', 'Approved'), ('denied', 'Denied')], default='submitted', max_length=50)),
                ('application_text', models.TextField(db_column='applicationText')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='createdAt')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updatedAt')),
                ('community', models.ForeignKey(db_column='communityUid', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='api.community')),
                ('user', models.ForeignKey(db_column='userUid', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='api.user')),
            ],
            options={
                'db_table': 'communityApplications',
                'managed': True,
                'unique_together': {('user', 'community')},
            },
        ),
    ]
